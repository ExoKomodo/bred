importc "./helpers.h"
importc "./keyboard.h"
importc "./types.h"

importc "ctype.h"
importc "errno.h"
importc "stdlib.h"
importc "string.h"
importc "termios.h"
importc "unistd.h"

import "src/commands.day"

let QUIT <- 113
let ENTER <- 13

fun bred_read_char (editor_config: EditorConfig) char do
  mut input: ptr<char> <- editor_config.input
  (memset input 0 1)
  let read_result: int <- (read STDIN_FILENO input 1)
  match
    (and
      (eq read_result (neg 1))
      (not (eq errno EAGAIN))) => do
      (bred_dead "read" 1)
      0
    end
    (default) => (unsafe_index input 0)
  end
end

fun bred_process_char (editor_config: EditorConfig c: char) int do
  (unused editor_config)
  match
    (falsey c) => 0
    (truthy (iscntrl c)) => do
      match
        (eq c (BRED_CTRL_MOD QUIT)) => 1
        (eq c ENTER) => do
          (printf "\r\n")
          0
        end
        (default) => do
          (printf "\r\nUnhandled control sequence: %d\r\n" c)
          0
        end
      end
    end
    (default) => do
      (printf "%c" c)
      (fflush stdout)
      0
    end
  end
end

fun bred_input_loop (editor_config: EditorConfig) int do
  let c: char <- (bred_read_char editor_config)
  match
    (eq 0 (bred_clear_screen editor_config)) => do
      let result: int <- (bred_process_char editor_config c)
      match
        (eq result 0) => (bred_input_loop editor_config)
        (default) => 0
      end
    end
    (default) => (bred_dead "bred_clear_screen" 1)
  end
end

fun bred_setup () EditorConfig do
  mut editor_config <- {EditorConfig
    input <- (calloc (sizeof char) 1)
  }
  (bred_raw_enable editor_config)
end

fun main () int do
  mut editor_config: EditorConfig <- (bred_setup)
  let result: int <- (bred_input_loop editor_config)
  
  (empty_editor_config editor_config)
  (printf "\r\nI am bred\r\n")
  result
end
