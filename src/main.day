import "lib/string.day"

import "src/helpers.day"
import "src/types.day"
import "src/window.day"

importc "./keyboard.h"
importc "./raw.h"
importc "./types.h"

importc "ctype.h"
importc "errno.h"
importc "stdlib.h"
importc "string.h"
importc "termios.h"
importc "unistd.h"

let QUIT <- 113
let ENTER <- 13

fun bred_display_rows (config: BreditorConfig row: size_t) int do
  let placeholder <- "~\r\n"
  let last_line_placeholder <- "~"
  match
    (eq row (sub config.window_data.rows 1))
      => match
      (truthy (write STDOUT_FILENO last_line_placeholder (strlen last_line_placeholder)))
        => 0
      (default)
        => (bred_dead "bred_display_rows" 1)
    end
    (default) => match
      (truthy (write STDOUT_FILENO placeholder (strlen placeholder)))
        => (bred_display_rows config (add row 1))
      (default)
        => (bred_dead "bred_display_rows" 1)
    end
  end
end

fun bred_display (config: BreditorConfig) int do
  (bred_display_rows config 0)
  (bred_reset_cursor)
end

fun bred_loop (config: BreditorConfig) int do
  let c: char <- (bred_read_char config)
  match
    (eq 0 (bred_clear_screen config)) => match
      (eq (bred_process_char config c) 0) => do
        (bred_display config)
        (bred_loop config)
      end
      (default)
        => 0
    end
    (default)
      => (bred_dead "bred_clear_screen" 1)
  end
end

fun bred_process_char (config: BreditorConfig c: char) int do
  (unused config)
  match
    (falsey c)
      => 0
    (truthy (iscntrl c)) => match
      (eq c QUIT) => do
        (bred_clear_screen)
        1
      end
      (eq c ENTER) => do
        (printf "\r\n")
        0
      end
      (default) => do
        (printf "\r\nUnhandled control sequence: %d\r\n" c)
        0
      end
    end
    (eq c QUIT) => do
      (bred_clear_screen)
      1
    end
    (default) => do
      (printf "%c" c)
      (fflush stdout)
      0
    end
  end
end

fun bred_read_char (config: BreditorConfig) char do
  mut input: ptr<char> <- config.input
  (memset input 0 1)
  let read_result: int <- (read STDIN_FILENO input 1)
  match
    (and
      (eq read_result (neg 1))
      (not (eq errno EAGAIN)))
      => (bred_dead "read" 1)
    (default)
      => (unsafe_index input 0)
  end
end

fun bred_setup () BreditorConfig do
  mut config <- {BreditorConfig
    input <- (calloc (sizeof char) 1)
    window_data <- (bred_get_window_data)
  }
  (bred_raw_enable config)
end

fun main () int do
  mut config: BreditorConfig <- (bred_setup)
  let result: int <- (bred_loop config)
  (bred_empty_breditor_config config)
  result
end
