importc "./helpers.h"
importc "./types.h"

importc "ctype.h"
importc "errno.h"
importc "stdlib.h"
importc "string.h"
importc "termios.h"
importc "unistd.h"

? q
let QUIT: char <- 113

fun empty_editor_config (editor_config: EditorConfig) int do
  mut input: ptr<char> <- editor_config.input
  (delete input)
  mut terminal_data: ptr<termios> <- editor_config.terminal_data
  (delete terminal_data)
  0
end

fun bred_input_loop (editor_config: EditorConfig) int do
  mut input: ptr<char> <- editor_config.input
  (memset input 0 1)
  let read_result: int <- (read STDIN_FILENO input 1)
  (unused read_result)
  let c: char <- (unsafe_index input 0)
  match
    (and
      (eq read_result (neg 1))
      (not (eq errno EAGAIN))) => do
      (bred_dead editor_config "read" 1)
    end
    (default) => do
      match
        (truthy (iscntrl c)) => do
          match
            (eq 0 c) => (bred_input_loop editor_config)
            (default) => do
              (printf "Control sequence: %d\r\n" c)
              (bred_input_loop editor_config)
            end
          end
        end
        (default) => do
          match
            (eq QUIT c) => 0
            (default) => do
              (printf "%c" c)
              (bred_input_loop editor_config)
            end
          end
        end
      end
    end
  end
end

fun bred_setup () EditorConfig do
  mut editor_config: EditorConfig <- {EditorConfig
    input <- (calloc (sizeof char) 1)
    original_terminal_data <- (malloc (sizeof termios))
    terminal_data <- (malloc (sizeof termios))
  }
  (bred_raw_enable editor_config)
end

fun main () int do
  mut editor_config: EditorConfig <- (bred_setup)
  let result: int <- (bred_input_loop editor_config)
  
  (empty_editor_config editor_config)
  (printf "\r\nI am bred\r\n")
  result
end
